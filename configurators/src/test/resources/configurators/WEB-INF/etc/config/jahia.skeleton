# +---------------------------------------------------------------------------+
# | Jahia main configuration file.                                            |
# +---------------------------------------------------------------------------+
#
#  This file contains some of the most important settings for configuring
#  it's behavior.
#  Other interesting files can be found elsewhere in the WEB-INF/etc
#  directory, such as WEB-INF/etc/spring for LDAP connector activation,
#  cache implementation configuration, Hibernate configuration, etc.

######################################################################
### Web application context path #####################################
######################################################################
# By default Jahia is deployed into ROOT context (context path is empty
# in this case). If deployed into another context, e.g. /jahia this value
# should be adjusted accordingly (in this case the context path starts
# with a slash).
jahia.contextPath                                      = 

######################################################################
### Server  ##########################################################
######################################################################
# General server information, such as release version, the application
# server it is running on, as well as the home disk path to the deployed
# Jahia instance.
release                                                =
server                                                 =
serverVersion                                          =
serverHome                                             =
# This setting can be used to activate particular profile:
#  - development
#  - production
#  - distantPublicationServer
operatingMode                                          = development
# Set this to true to enable maintenance mode, i.e. no requests will be
# served except to /tools/
maintenanceMode                                        = false

######################################################################
### Disk Paths  ######################################################
######################################################################
# The following disk paths configure where Jahia will store data on disk,
# such as temporary files or content files, or even in some cases where
# it will retrieve additional configuration from.

jahiaJspDiskPath                                       =   /
jahiaEnginesDiskPath                                   =   /engines/
jahiaTemplatesDiskPath                                 =   /modules/
jahiaJavaScriptDiskPath                                =   /javascript/

jahiaFilesDiskPath                                     =   $context/WEB-INF
jahiaEtcDiskPath                                       =
jahiaVarDiskPath                                       =
tmpContentDiskPath                                     =   $context/WEB-INF/var/content/tmp/

jahiaSharedTemplatesDiskPath                           =
jahiaImportsDiskPath                                   =
jahiaWebAppsDiskPath                                   =

jahiaCkEditorDiskPath                                  =    ckeditor

######################################################################
### URL's  ###########################################################
######################################################################

jahiaHostHttpPath                                      =
jahiaTemplatesHttpPath                                 =
jahiaEnginesHttpPath                                   =
jahiaJavaScriptHttpPath                                =

# Provide your custom URL for the WAR deployer, if you use non-standard one  
jahiaWebAppsDeployerBaseURL                            = http://127.0.0.1:8080/manager/html/

# This parameter will control, that if vanity URLs exists for a node and if
# it has been accessed with a non-default vanity URL, we inform the client that
# the resource has permanently moved (HTTP status code 301)
permanentMoveForVanityURL                              = true

######################################################################
### Mail Service Configuration #######################################
######################################################################
# These settings configure how Jahia will send messages for
# error reports. They are configured via the configuration
# wizard upon initial installation of Jahia.
mail_service_activated                                 =   false
mail_server                                            = localhost
mail_administrator                                     =
mail_from                                              =
mail_paranoia                                          =
# This parameter allows to control mail regrouping of a repeating exception
# If a repeating exception occurs more than this maximum, a mail will be
# sent anyway, just so that we are still informed in case this is the only
# error sent.
mail_maxRegroupingOfPreviousException                  = 500

######################################################################
### Database  ########################################################
######################################################################
# Database connection configuration is no longer configured here,
# but rather through container-managed datasource connection. In Tomcat 
# these can be found in the following file:
# <jahia-web-app-dir>/META-INF/context.xml
db_script                                              =   derby_embedded.script
# The DB dialect to be used by the Hibernate
hibernate.dialect                                      =   @HIBERNATE_DIALECT@
# Should nested transaction be allowed?
nested.transaction.allowed                             =   @NESTED_TRANSACTION_ALLOWED@
# Quartz scheduler driver delegate class
org.quartz.driverDelegateClass                         =   org.quartz.impl.jdbcjobstore.StdJDBCDelegate

######################################################################
### Characters encoding ##############################################
######################################################################
# The character encoding (MIME charset) of the response being sent to the client,
# request character encoding and e-mail charset. 
characterEncoding                                      =   UTF-8

######################################################################
### Cache settings ###################################################
######################################################################
# These settings controls all the caches that are integrated in Jahia,
# except for the Hibernate ones that are controlled from the
# WEB-INF/etc/spring/applicationcontext-hibernate.xml configuration
# file.
#
# The entry allow you to specify the amount of free memory you want to keep in your jvm
# If we reach this limit jahia will remove entries of his cache until if get under this limit
# this limit must be express in MB size
freeMemoryLimit = 64MB

# The following setting allows to select the underlying cache implementation used
# in the Jahia's cluster cache implementations. Possible values are :
# - jahiaReferenceCache : a cache implementation that uses SoftReferences to
#   hold references to the cached objects. This cache will free memory in order
#   to avoid OutOfMemory errors.
# - jahiaSimpleCache : an LRU cache implementation that uses the freeMemoryLimit
#   trigger to flush elements from memory
cacheClusterUnderlyingImplementation = jahiaReferenceCache

# caches may use groups that work like categories on cache entries. By default
# groups are limited in numbers of 20000, with an LRU (least recently used)
# algorithm for removing a group. When a group is removed, so are all the
# cache entries. If you see a lot of messages warning that groups were being
# flushed and that your Jahia installation has sufficient runtime memory,
# you should set this value higher. In installations with little memory
# available, you should keep this value as low as possible.
cacheMaxGroups = 20000

######################################################################
### Template set #####################################################
######################################################################
# Default value for template set
default_templates_set		                        =   templates-intranet
# Default setting for the error handling in modules (page fragments).
# How should we handle an exception within the fragment?
#    'hide' - the whole module content will not be written out into
#             the JSP writer if any error occurs;
#    'compact' (default) - shows a predefined error message instead of
#                          partial module content;
#    'full' - shows real exception message with a stacktrace;
#    'propagate' - propagates the occurred exception to the higher
#                  level (normally ends up with a standard error page) 
templates.modules.onError                             	= compact

######################################################################
### Filemanager  #####################################################
######################################################################
# Configuration of the file manager that uses JCR as a back-end.
jahiaFileUploadMaxSize                                  =  104857600

######################################################################
### Templates Observer  ##############################################
######################################################################
# Time in milliseconds between checks for the template deployment
# descriptor changes in order to restart the JahiaTemplateManagerService.
# Set to -1 to deactivate changes detection completely.
# Note, if "operatingMode" option is set to "development", this parameter
# is ignored and the observer is started with the interval of 5 seconds. 
templates.observer.interval                            =   5000

######################################################################
### Multilingual support   ###########################################
######################################################################
# The fall-back language code after we have tried to resolve the
# current browsing code from :
# - the session
# - the browser's settings
# - the site's language list
org.jahia.multilang.default_language_code              =   en
# Resource bundle lookup mechanism type.
# If set to true, the default ResourceBundle resolution scheme
# is used, i.e. the Locale.getDefault() is considered before
# using bundle with the base name (no locale):
# 1) the requested locale is used
# 2) the current default locale as returned by Locale.getDefault()
# 3) the root resource bundle (basename) is used
# See http://java.sun.com/j2se/1.5.0/docs/api/java/util/ResourceBundle.html#getBundle(java.lang.String,%20java.util.Locale,%20java.lang.ClassLoader)
# for details.
# If the value is false the JSTL-like lookup is used:
# 1) the requested locale is used
# 2) the root resource bundle (basename) is used
# In this case the step with default locale is omitted.
considerDefaultJVMLocale                               =   false
# Should we switch to the user's preferred language after login?
# Language switch takes place only if the current site has entries
# in the user's preferred language  
considerPreferredLanguageAfterLogin                    =   false

######################################################################
### NTLM Authentication config #######################################
######################################################################
# Enable the NtlmHttpFilter and adjust its configuration in the
# applicationcontext-ntlmfilter.xml file
ntlmFilter.enabled                                     = false

######################################################################
### SPNEGO Authentication config #####################################
######################################################################
# Enable the SpnegoHttpFilter and adjust its configuration in the
# applicationcontext-spnegofilter.xml file
spnegoFilter.enabled                                   = false

######################################################################
### CAS Authentication config ########################################
######################################################################
# You can configure here the CAS authentication sub-system. First
# you must add the CAS valve in the WEB-INF/etc/spring/auth/applicationcontext-auth-pipeline.xml
# file in the authPipeline with the following section, add the end
# of the pipeline :
# <bean class="org.jahia.params.valves.CASAuthValveImpl" />
#
# The following setting configures the redirect URL to the CAS server
# for login
cas.loginUrl                                           = https://localhost:8443/cas/login
# The following setting configures the URL on which we validate the
# ticket.
cas.validateUrl                                        = https://localhost:8443/cas/serviceValidate

######################################################################
### Cookie authentication valve config #############################
######################################################################
#
# The cookie authentication valve is a system that uses cookies to store
# an identifier corresponding to a specific Jahia user, when he selects the
# "remember me" option in the login engine.
#
# Should we use cookie authentication for login ?
cookieAuthActivated                                    =   true

######################################################################
### Logoff Redirect ##################################################
######################################################################
# uncomment this to bypass the usual Jahia logout process and instead redirected the user after logout
# to a URL of your choice
#logoutRedirectUrl                                      =   http://www.acme.com/logoff.php

# Uncomment this to perform a forward to the internal page or JSP (the URL is context related) after user logout.
# This parameter is mutually exclusive with the previous one (logoutRedirectUrl).
# It will be considered only if the previous one is not set.
#logoutForwardUrl                                      =   /jsp/afterLogout.jsp

# Jahia was always forwarding the new page URL after logout, but this
# way the frontend HTML Container cache was not used. So the following
# setting does a client side redirect on logout to make use of the caches
# and save resources with not having to render the page after logout.
doRedirectOnLogout                                     = true

######################################################################
### Site serverName testing config ###################################
######################################################################
# The following configuration parameters mostly concern the generation of the
# "Exit Administration" button in the administration console. The URL that is
# generated to go back to a site needs to be tested first, in order to
# determine if we should generate an URL using the site's serverName or if
# we should generate an URL using the current host name used for accessing the
# administration servlet.
#
# For example, if for a site we have :
#    serverName="this.is.an.invalid.hostname",
#    serverKey="myTestSite"
# the following parameters will determine the URL that will be tested. So
# if we have the default, Jahia will try to connect to :
#    http://this.is.an.invalid.hostname:8080/jahia/jsp/isjahia.jsp
# and use the connection timeout that we specify. If the connection fails,
# the URL generated will be :
#    http://localhost:8080/jahia/Jahia/site/myTestSite
# The localhost:8080 part may be different if this is not what we are using
# when connecting to the administration servlet. If we are connected to the
# administration servlet with :
#    http://127.0.0.1:7070/cms/administration
# then the fallback URL for the "Exit Administration" would be :
#    http://127.0.0.1:7070/cms/Jahia/site/myTestSite
#
# The siteServerNameTestURLExpr can access the following variables :
#  "request" - an HttpServletRequest object
#  "siteServerName" - a String that contains the siteServerName we want to
# test.
# Expressions always start with "${" and end with "}". The expression
# language supported is JEXL. You can find more information about JEXL
# here : http://jakarta.apache.org/commons/jexl/
# Note : you can also change the name/location of the isjahia.jsp file. The
# only thing this resource must do is set a header called "jahia-version" that
# must be present for the siteServerName to be properly identified as a Jahia
# server.
siteServerNameTestURLExpr                              = ${request.scheme}://${siteServerName}:${request.serverPort}${request.contextPath}/isjahia.jsp
#
# Instead of using absolute URLs (e.g. http://www.acme.com:8081/jahia/Jahia/site/mySite/pid/2)
# for the "Exit Administration" button, as explained above, you can choose to generate
# relative URLs (e.g. /jahia/Jahia/site/mySite/pid/2) by uncommenting the option below:
# useRelativeSiteURLs                                   = true

# The following parameter allows for configuration of the connection timeout
# when testing with the above URL. Don't set this too high as the connection
# will be attempted everytime an "Exit Administration" button is generated.
# The timeout value is in milliseconds.
siteServerNameTestConnectTimeout                       = 500

# The siteURLPortOverride allows to force the generation of siteURLs to a
# certain port. This will bypass the request.getServerPort() calls
# and everything else. If it is set to 0, the port override is inactive,
# but any other positive value will force the
# generation of the site URL (notably used in the Exit Administration button)
# to use the port specified here. Be careful when setting this might cause
# issues with cookies, or if you plan to access Jahia through multiple
# front-end machines.
siteURLPortOverride                                    = 0

######################################################################
### Cluster settings  ################################################
######################################################################

# Use this setting to activate most of the clustering communicating
cluster.activated                                      = false

# the serverId MUST be different for each node of the cluster.
cluster.node.serverId                                  = jahiaServer1

# The processingServer setting specifies whether this instance of Jahia
# will execute long-running operations such as activation jobs, XML imports,
# etc. In the current implementation only one cluster node may be a
# processing server, while all others must have this settings to the
# value "false".
processingServer                                       = true

# Here a default configuration for TCP Clustering
# The example below uses two-nodes cluster: 192.168.1.100 and 192.168.1.200
# Current node is 192.168.1.100
#
# Here your local ip address
cluster.tcp.start.ip_address                           =   192.168.1.100
# Here the minimum numbers of members in the group to be contacted for initial membership
#(if your cluster is higher than two nodes then upgrade this to at least 3)
cluster.tcp.num_initial_members                        =   2
# Here the list of all members ip and port, and local port for each channel
cluster.tcp.ehcache.hibernate.nodes.ip_address         =   192.168.1.100[7860],192.168.1.200[7860]
cluster.tcp.ehcache.hibernate.port                     =   7860
cluster.tcp.ehcache.jahia.nodes.ip_address             =   192.168.1.100[7870],192.168.1.200[7870]
cluster.tcp.ehcache.jahia.port                         =   7870

######################################################################
### custom errorDocument site property  ##############################
######################################################################
# this setting enable specific error document pages for each site.
# if you uncomment this setting, you need to create an errors directory
# with your specific errorDocument jsp pages in the site directory first!
#
site.error.enabled 										= true

######################################################################
### User and Group name validation ###################################
######################################################################
# Pattern for the user name validation. The new user name will be
# tested against this regular expression (see java.util.regex.Pattern)
# pattern.
# Please update the resource bundle message:
# org.jahia.admin.users.ManageUsers.onlyCharacters.label
# (JahiaInternalResources.properties),
# to reflect the pattern changes
userManagementUserNamePattern                           = [0-9a-z_A-Z\\-\\{\\}\\.@]+
# Pattern for the group name validation. The new group name will be
# tested against this regular expression (see java.util.regex.Pattern)
# pattern.
# Please update the resource bundle message:
# org.jahia.admin.users.ManageGroups.onlyCharacters.label
# (JahiaInternalResources.properties),
# to reflect the pattern changes
userManagementGroupNamePattern                          = [0-9a-z_A-Z\\-\\{\\}]+

######################################################################
### Servlet response wrapper behavior control ########################
######################################################################
# The following setting controls whether a call to
# ServletIncludeResponseWrapper.flushBuffer() will actually trigger
# a buffer flush or not. The default behavior is to activate this,
# and this settings might be deprecated in a later version of Jahia
# if this control is not necessary, but we introduced it in order to
# control this behavior at deployment time.
wrapperBufferFlushingActivated = true

######################################################################
### File Error dumping ###############################################
######################################################################
# By default Jahia dumps are errors in files created in temp directory
# These files have the format
# error-DATE-TIME-EXCEPTION_COUNT_SINCE_STARTUP.txt
# The generated files contain a lot of information, very useful to
# fully understand the context of an error. When submitting an error
# to Jahia support, please always activate this logging and submit
# the files into the support tracking system.
#
# The following setting activates / deactivates this behavior.
dumpErrorsToFiles = true
# This parameter allows to control file regrouping of a repeating exception
# If a repeating exception occurs more than this maximum, a file will be
# dumped anyway, just so that we are still informed in case this is the only
# error sent.
fileDumpMaxRegroupingOfPreviousException = 500

######################################################################
### HTML tag filtering ###############################################
######################################################################
# Provide a list of comma-separated HTML tag names that will be removed
# from rich text properties before saving them (e.g. iframe,script,style).
# Leave this list empty if no filtering should be done.
filteredHtmlTags =  
